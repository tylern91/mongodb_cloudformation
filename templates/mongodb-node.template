AWSTemplateFormatVersion: 2010-09-09
Description: Deploy MongoDB Replica Node on AWS (Existing VPC)

Parameters:
  ClusterReplicaSetCount:
    Description: Number of Replica Set Members. Choose 1 or 3
    Type: String
    Default: '1'
    AllowedValues:
      - '1'
      - '3'
  ImageId:
    Description: AMI ID for Instance
    Type: 'AWS::EC2::Image::Id'
  Iops:
    Type: String
    Description: Iops of EBS volume when io1 type is chosen. Otherwise ignored
    Default: '100'
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: home
    Description: >-
      Name of an existing EC2 KeyPair. MongoDB instances will launch with this
      KeyPair.
  MongoDBAdminUsername:
    Default: admin
    NoEcho: 'true'
    Description: MongoDB admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  MongoDBAdminPassword:
    AllowedPattern: '([A-Za-z0-9_@-]{8,32})'
    ConstraintDescription: >-
      Input your MongoDB database password, Min 8, Maximum of 32 characters.
      Allowed characters are: [A-Za-z0-9_@-]
    Description: 'Enter your MongoDB Database Password, Min 8, maximum of 32 characters.'
    NoEcho: 'true'
    Type: String
  MongoDBInterServersSecurityGroupID:
    Description: >-
      ID of the MongoDB Inter-Server Communication Security Group (e.g., sg-7f16e910)
    Type: 'AWS::EC2::SecurityGroup::Id'
  MongoDBNodeIAMProfileID:
    Description: ID of the MongoDB IAM Profile
    Type: String
  MongoDBServerSecurityGroupID:
    Description: 'ID of the MongoDB Server Access Security Group (e.g., sg-7f16e910)'
    Type: 'AWS::EC2::SecurityGroup::Id'
  MongoDBVersion:
    Description: MongoDB version
    Type: String
    Default: '4.0'
    AllowedValues:
      - '4.0'
      - '3.6'
      - '3.4'
      - '3.2'
  NodeInstanceType:
    Description: Amazon EC2 instance type for the MongoDB nodes.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - r5.large
      - r5.xlarge
  NodeReplicaSetIndex:
    Description: Instance Index
    Type: String
  NodeSubnet:
    Description: Subnet Id
    Type: String
  NodeNameTag:
    Description: Instance Name
    Type: String
  ReplicaNodeWaitForNodeInstallWaitHandle:
    Description: Pre-signed Wait Handle URL to send signal for associated wait condition
    Type: String
  ReplicaSetName:
    Description: Name for the MongoDB Replica Set
    Type: String
  S3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    Default: cloudformation-manifests
    Type: String
    ConstraintDescription: >-
      Manifests bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Description: >-
      S3 bucket name for the MongoDB manifests. Bucket name can
      include numbers, lowercase letters, uppercase letters, and hyphens (-). It
      cannot start or end with a hyphen (-).
  S3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    Default: mongodb/
    Type: String
    ConstraintDescription: >-
      Manifests key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Description: >-
      S3 key prefix for the MongoDB manifests. Key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/). It cannot start or end with a hyphen (-).
  VolumeSize:
    Type: String
    Description: EBS Volume Size (data) to be attached to node in GBs
    Default: '100'
  VolumeType:
    Type: String
    Description: 'EBS Volume Type (data) to be attached to node in GBs [io1,gp2]'
    Default: gp2
    AllowedValues:
      - gp2
      - io1
  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Description: >-
      VPC-ID of your existing Virtual Private Cloud (VPC) where you want to depoy MongoDB cluster.

Conditions:
  UsePIops: !Equals
    - !Ref VolumeType
    - io1
  UsingDefaultBucket: !Equals
    - !Ref S3BucketName
    - mongodb-manifests

Resources:
  ReplicaNodeNetworkInterface:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: Network Interface for Mongo Node
      SubnetId: !Ref NodeSubnet
      GroupSet:
        - !Ref MongoDBServerSecurityGroupID
        - !Ref MongoDBInterServersSecurityGroupID
      SourceDestCheck: true
      Tags:
        - Key: Network
          Value: Private
  ReplicaNodeInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      HostRole: MongoDB Node
      'AWS::CloudFormation::Init':
        config:
          files:
            /tmp/mongo_pass.txt:
              content: !Ref MongoDBAdminPassword
              mode: '000440'
              owner: root
              group: root
    Properties:
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref ReplicaNodeNetworkInterface
          DeviceIndex: '0'
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      IamInstanceProfile: !Ref MongoDBNodeIAMProfileID
      Tags:
        - Key: Name
          Value: !Ref NodeNameTag
        - Key: ClusterReplicaSetCount
          Value: !Ref ClusterReplicaSetCount
        - Key: NodeReplicaSetIndex
          Value: !Ref NodeReplicaSetIndex
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 16
            Encrypted: true
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: !Ref VolumeType
            Iops: !If
              - UsePIops
              - !Ref Iops
              - !Ref 'AWS::NoValue'
            DeleteOnTermination: true
            Encrypted: true
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - '/opt/aws/bin/cfn-init -v --stack '
            - !Ref 'AWS::StackName'
            - ' --resource ReplicaNodeInstance '
            - ' --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              mkdir -p /home/ec2-user/mongodb
            - |
              cd /home/ec2-user/mongodb
            - 'aws s3 cp s3://'
            - !If
              - UsingDefaultBucket
              - !Sub '${S3BucketName}-${AWS::Region}'
              - !Ref S3BucketName
            - /
            - !Ref S3KeyPrefix
            - |
              scripts/orchestrator.sh orchestrator.sh
            - |
              chmod +x orchestrator.sh
            - 'aws s3 cp s3://'
            - !If
              - UsingDefaultBucket
              - !Sub '${S3BucketName}-${AWS::Region}'
              - !Ref S3BucketName
            - /
            - !Ref S3KeyPrefix
            - >
              scripts/disable-transparent-hugepages
              /etc/init.d/disable-transparent-hugepages
            - |
              chmod +x /etc/init.d/disable-transparent-hugepages
            - |
              chkconfig --add disable-transparent-hugepages
            - 'aws s3 cp s3://'
            - !If
              - UsingDefaultBucket
              - !Sub '${S3BucketName}-${AWS::Region}'
              - !Ref S3BucketName
            - /
            - !Ref S3KeyPrefix
            - |
              scripts/init_replica.sh init.sh
            - 'aws s3 cp s3://'
            - !If
              - UsingDefaultBucket
              - !Sub '${S3BucketName}-${AWS::Region}'
              - !Ref S3BucketName
            - /
            - !Ref S3KeyPrefix
            - |
              scripts/signalFinalStatus.sh signalFinalStatus.sh
            - |
              chmod +x signalFinalStatus.sh
            - |
              chmod +x init.sh
            - |
              #  Run the install
            - |
              #  Store stack name to tag DDB name
            - 'echo '
            - !Join
              - _
              - - export TABLE_NAMETAG=
                - !Ref ReplicaSetName
            - |2
               >> config.sh
            - 'echo '
            - !Join
              - ''
              - - export MongoDBVersion=
                - !Ref MongoDBVersion
            - |2
               >> config.sh
            - 'echo '
            - !Join
              - ''
              - - export VPC=
                - !Ref VPC
            - |2
               >> config.sh
            - |
              #  Store WaitHandler
            - 'echo '
            - !Join
              - ''
              - - '"'
                - export WAITHANDLER='
                - !Ref ReplicaNodeWaitForNodeInstallWaitHandle
                - ''''
                - '"'
            - |2
               >> config.sh
            - 'echo '
            - !Join
              - ''
              - - export MONGODB_ADMIN_USER=
                - !Ref MongoDBAdminUsername
            - |2
               >> config.sh
            - |
              mkdir -p /mongo_auth
            - |
              ./init.sh > install.log 2>&1
            - |
              #  Cleanup
            - |
              #rm -rf *
            - |
              chown -R ec2-user:ec2-user /home/ec2-user/
            - |
              /home/ec2-user/mongodb/signalFinalStatus.sh 0
      InstanceType: !Ref NodeInstanceType
  NodeInstanceRecoveryAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: >-
        EC2 Autorecovery for Node Instance. Autorecover if we fail EC2 status
        checks for 5 minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 5
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
        - !Join
          - ''
          - - 'arn:aws:automate:'
            - !Ref 'AWS::Region'
            - ':ec2:recover'
      Dimensions:
        - Name: InstanceId
          Value: !Ref ReplicaNodeInstance

Outputs:
  NodePrivateIp:
    Value: !GetAtt
      - ReplicaNodeInstance
      - PrivateIp
    Description: Private IP Address of Node Instance
  NodeInstanceID:
    Description: The Instance ID
    Value: !Ref ReplicaNodeInstance
  NodeNameTag:
    Description: Node Name Tag
    Value: !Ref NodeNameTag
